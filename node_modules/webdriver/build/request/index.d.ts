import { EventEmitter } from 'node:events';
import { URL } from 'node:url';
import type { Options } from '@wdio/types';
type RequestLibResponse = Options.RequestLibResponse;
type RequestOptions = Omit<Options.WebDriver, 'capabilities'>;
export declare class RequestLibError extends Error {
    statusCode?: number;
    body?: any;
    code?: string;
}
export interface WebDriverResponse {
    value: any;
    /**
     * error case
     * https://w3c.github.io/webdriver/webdriver-spec.html#dfn-send-an-error
     */
    error?: string;
    message?: string;
    stacktrace?: string;
    /**
     * JSONWP property
     */
    status?: number;
    sessionId?: string;
}
export declare const COMMANDS_WITHOUT_RETRY: string[];
export default abstract class WebDriverRequest extends EventEmitter {
    #private;
    body?: Record<string, unknown>;
    method: string;
    endpoint: string;
    isHubCommand: boolean;
    requiresSessionId: boolean;
    constructor(method: string, endpoint: string, body?: Record<string, unknown>, isHubCommand?: boolean);
    makeRequest(options: RequestOptions, sessionId?: string): Promise<WebDriverResponse>;
    protected _createOptions(options: RequestOptions, sessionId?: string, isBrowser?: boolean): Promise<{
        url: URL;
        requestOptions: RequestInit;
    }>;
    protected _libRequest(url: URL, options: RequestInit): Promise<RequestLibResponse>;
    protected _libPerformanceNow(): number;
    private _request;
}
export {};
//# sourceMappingURL=index.d.ts.map